drop database if exists myBook;
create database myBook;
use  myBook;

create table myBookUser(
    userId varchar(20),
    firstName varchar(20),
    lastName varchar(20),
    email varchar(50),
    pword varchar(64),
   
    phone varchar(15),
    primary key(userId)

);

create table uProfile(
    userId varchar(20),
    profileNo varchar(20),
    profilePic LONGBLOB,
    profileSummary varchar(255),
    stateLiving varchar(30),
    countryLiving varchar(30),
    primary key (userId,profileNo),
    foreign key(userId) references myBookUser(userId) on delete cascade



);

create table userMakesPost(
    postId varchar(20),
    userId varchar(20),
    postDate date,
    postTime time,
    primary key(postId,userId),
    foreign key(userId) references myBookUser(userId)



);
create table posts(
    postId varchar(20),
    userId varchar(20),
    postDate date,
    postTime time,
    
    



);

create table texts(
    postId varchar(20),
    textId varchar(20),
    textContent varchar(255),
    primary key(postId,textId),
    foreign key(postId) references post(postId) 


);

create table images(
    postId varchar(20),
    imageId varchar(20),
    images LONGBLOB,
    primary key(postId,imageId),
    foreign key(postId) references post(postId) 
);



create table Friendship(
    userId varchar(20),
    fUserId varchar(20),
    fType varchar(20),
    primary key(userId, fUserId),
    foreign key (userId) references myBookUser(userId) on delete cascade,
    foreign key (fUserId) references Friend(fUserId) on delete cascade



);

create table myBookGroup(
groupId varchar(20),
groupName varchar(20),
createdBy varchar(20),
primary key(groupId)



);

create table joinsGroup(
groupId varchar(20),
userId varchar(20),
groupContentViewer varchar(20),
groupContentEditor varchar(20),
primary key(groupId,userId),
foreign key(groupId) references myBookGroup(groupId) on delete cascade,
foreign key(userId) references myBookUser(userId)
);






create table comments(
userId varchar(20),
commentId varchar(20),
commentDetail varchar(20),
commentDate date,
comentTime time,
primary key (userId,commentId),
foreign key (userId) references myBookUser(userId) on delete cascade


/* A U X I L L A R Y     T A B L E S*/

create table friendFrom(
        fUserId varchar(20),
        notif varchar(20),
        createDate date




);
create table capacity(
    almostFullGroup varchar(20),
    groupNotif varchar(100)

);

/*create table bestFriends(
        personId varchar(20),
        theFriendsId varchar(20),



);
*/

);


f.write("insert into myBookUser values('"+userId+"','"+firstName+"','"+lastName+"','"+email+"','"+pword+"','"+phonenumber+"'\n");

f.write("insert into uProfile values('"+userId+"','"+profileNo+"','"+profilePic+"','"+profileSummary+"'\n");

f.write("insert into posts values('"+postId+"','"+userId+"','"+postDate+"','"+postTime+"'\n");

f.write("insert into texts values('"+postId+"','"+textId+"','"+textContent+"'\n");

f.write("insert into images values('"+postId+"','"+imageId+"','"+images+"'\n");

f.write("insert into Friend values('"+userId+"','"+fUserId+"','"+fFirstName+"','"+fLastNamey+"','"+fPhoneNum+"'\n");

f.write("insert into Friendship values('"+userId+"','"+fUserId+"','"+fType+"'\n");

f.write("insert into myBookGroup values('"+groupId+"','"+groupName+"','"+createdBy+"'\n");

f.write("insert into joinsGroup values('"+groupId+"','"+userId+"','"+groupContentViewer+"','"+groupContentEditor+"'\n");

f.write("insert into comments values('"+userId+"','"+commentId+"','"+commmentDetail+"','"+commentDate+"','"+comentTime+"'\n");


/*Shows text based post by a user if there's a textid*/
select textContent from texts join posts on texts.postId =  posts.postId join uProfile on posts.userId = uProfile.userId where texts.textId is not null;

/*Shows image based post by a user if there's a imageid*/
select textContent from images join posts on images.postId =  posts.postId join uProfile on posts.userId = uProfile.userId where images.textId is not null;

/*Show friends that are of "friend" type*/
select fUserId from Friendship join uProfile on Friendship.userId = uProfile.userId where fType= "friend";

/*Shows a users first and last name along with an associated comment*/
select firstName,lastName,commentDetail from uProfile join comments  on comments.userId = uProfile.userId;
/*Shows a users first and last name and associated group*/
select firstName,lastName, groupName from uProfile join joinsGroup on uProfile.userId = joinsGroup.userId join myBookGroup on joinsGroup.groupId = myBookGroup.groupId;

/*Shows all the first name, last name of users that friend type is "family" to the associated user*/
select firstName,lastName from Friendship join uProfile on Friendship.fUserId=uProfile.userId where Friendship.fUserId in(

    select fUserId from Friendship where friendship.userId = '001' and ftype="Family"
);
/* Counts the amount of users within the group named "TheRoyalFamily"*/
select count(userId) from joinsGroup where groupName = "TheRoyalFamily"

/*Shows the first and last name of all the users within the group "TheRoyalFamily"*/
select firstName,lastName from uProfile join joinsGroup on uProfile.userId= joinsGroup.userId join myBookGroup on myBookGroup.groupId= joinsGroup.groupId where myBookGroup.groupName ='TheRoyalFamily';

update users set userid='US0'+right(userid,2) where userid='US9';
SELECT * FROM users ORDER BY right(userid,2) ;
